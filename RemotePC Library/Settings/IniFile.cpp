#include "IniFile.h"

CIniFile::CIniFile()
{
	EraseFileName();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CIniFile::ClearFile()
{
	CTxtFileIO f;
	if(f.OpenForWriting(FileName))
		f.Close();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CIniFile::EndLine()
{
	CTxtFileIO f;
	if(f.OpenForAppending(FileName)){
		LPSTR nl = "\n";
		f.WriteLine(nl);
		f.Close();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CIniFile::SetFileName(char *fname)
{
	if(!FileName)
		EraseFileName();

	strncpy(FileName, fname, MAX_PATH);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CIniFile::EraseFileName()
{
	ZeroMemory(FileName, MAX_PATH);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CIniFile::DoesFileExists(char *fname)
{
	HANDLE f = CreateFile(fname, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);

	if(f != INVALID_HANDLE_VALUE){
		CloseHandle(f);
		return true;
	}

	return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CIniFile::CompareStr(char *s1, char* s2)
{
	bool res = true;
	int i = 0;

	while(1)
	{
		if(s1[i] == NULL || s2[i] == NULL)
			break;
		
		if(tolower(s1[i]) != tolower(s2[i])){
			res = false;
			break;
		}	

		i++;
	}

	return res;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CIniFile::ReadString(char *pSection, char *pKey, char *pDefault, char *pValue, int BufSize)
{
	ZeroMemory(pValue, BufSize);

	GetPrivateProfileString(pSection, pKey, pDefault, pValue, BufSize, FileName);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

char* CIniFile::ReadString(char *pSection, char *pKey, char *pDefault)
{
	static const int BufSize = 8192;
	static char Buffer[BufSize];
	ZeroMemory(Buffer, BufSize);

	GetPrivateProfileString(pSection, pKey, pDefault, Buffer, BufSize, FileName);

	return Buffer;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int CIniFile::ReadInteger(char *pSection, char *pKey, int Default)
{
	return GetPrivateProfileInt(pSection, pKey, Default, FileName);;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CIniFile::ReadBoolean(char *pSection, char *pKey, bool Default)
{
	static const int BufSize = 8192;
	static char Buffer[BufSize];
	ZeroMemory(Buffer, BufSize);

	GetPrivateProfileString(pSection, pKey, !Default ? "False" : "True", Buffer, BufSize, FileName);

	return CompareStr(Buffer, "True");
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CIniFile::WriteString(char *pSection, char *pKey, char *pValue)
{
	return WritePrivateProfileString(pSection, pKey, pValue, FileName) != 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CIniFile::WriteString(char *pSection, char *pKey, const char *fmt, ...)
{
	if(fmt == NULL)
		return false;

	const int BufSize = 8192;

	char szValue[BufSize];
	ZeroMemory(szValue, BufSize);

	va_list ap;
	va_start(ap, fmt);
	_vsnprintf(szValue, BufSize, fmt, ap);
	va_end(ap);

	return WritePrivateProfileString(pSection, pKey, szValue, FileName) != 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CIniFile::WriteInteger(char *pSection, char *pKey, int Value)
{
	const int BufSize = 64;
	char szNumber[BufSize];
	ZeroMemory(szNumber, BufSize);
	sprintf(szNumber, "%d", Value);

	return WritePrivateProfileString(pSection, pKey, szNumber, FileName) != 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool CIniFile::WriteBoolean(char *pSection, char *pKey, bool Value)
{
	char szValue[64];
	ZeroMemory(szValue, 64);

	sprintf(szValue, Value ? "True" : "False", Value);
	return WritePrivateProfileString(pSection, pKey, szValue, FileName) != 0;
}

